# -*- coding: utf-8 -*-
"""
Created on Sat Jul  2 13:46:33 2022

@author: a3311
"""

from tcn import TCN, tcn_full_summary
from tensorflow.keras.layers import Dense
from tensorflow.keras.models import Sequential
import matplotlib.pyplot as plt
import numpy as np
import pandas as pd
from tensorflow.keras import Input, Model
from tensorflow.keras.layers import Dense
from tcn import TCN
from sklearn.utils import shuffle 
import random
import time

# if time_steps > tcn_layer.receptive_field, then we should not
# be able to solve this task.
batch_size, time_steps, input_dim = None, 5 , 56


tcndata=np.loadtxt('./tcndata/tcn_xyall.txt', dtype=float)
tcnlabel=np.loadtxt('./tcndata/tcn_labelall.txt', dtype=int)



lookback_window = 5
segmentdata=np.zeros((15,56), dtype=int)
slidind_x, y = [], []
sliding_position=0

for j in range (0,len(tcndata),15):
    for m in range (0,15):
        sliding_position=j+m
        for one in range(28):
            odd=one*2+1
            even=one*2
            segmentdata[m][even]=tcndata[sliding_position][even]
            segmentdata[m][odd]=tcndata[sliding_position][odd]
        
    for i in range(lookback_window, 15+1, 2): #range:12~167
        S=segmentdata.copy()
        #slidind_x[j].append(x_train[j][i - lookback_window:i])
        slidind_x.append(S[i - lookback_window:i])
        #print(f'i = {i}')
        #print(f'i - lookback_window = {i - lookback_window}')
        #print(f'x:{slidind_x}\n')
        y.append(tcnlabel[sliding_position])

slidind_x = np.array(slidind_x)
y = np.array(y)







tcn_layer = Input(shape=(time_steps, input_dim))
m = TCN()(tcn_layer)
m = Dense(256, activation='relu')(m)
m = Dense(256, activation='relu')(m)
m = Dense(6, activation='softmax')(m)
model = Model(inputs=[tcn_layer], outputs=[m])

model.summary()

model.compile(loss='sparse_categorical_crossentropy',optimizer='adam', metrics=['accuracy'])
slidind_x, y = shuffle(slidind_x, y, random_state=25)

x_train=slidind_x[239:,:,:]
x_test=y[239:]
y_train=slidind_x[:239,:,:]
y_test=y[:239]



history=model.fit(x_train, x_test, epochs=30, verbose=2)


scores = model.evaluate(slidind_x, y, verbose=0)
#print("Accuracy: %.2f%%" % (scores*100))
plt.title('train_loss')
plt.ylabel('loss')
plt.xlabel('Epoch')
plt.plot(history.history["loss"])

start = time.time()
p = model.predict(y_train)

print("The time used to execute this is given below")

end = time.time()

print(end - start)
predict = []
print(y_train.shape)

for i in range(len(p)):
    predict_max=max(p[i])
    for j in range(6):
        if(p[i][j]==predict_max):
            predict.append(j)

predict=np.array(predict)
print(np.size(predict))
print(np.size(y_test))

correct=0
for i in range(len(predict)):
    if(y_test[i]==predict[i]):
        correct=correct+1
print(correct)
accuracy=correct/len(y_test)
print("accuracy="+str(accuracy))
